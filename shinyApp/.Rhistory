system.time(customer_available <- subset(customer, subset = !is.na(customer$CITY_ZIP))
)
head(customer)
xplay_address <- left_join(xplay, address, by = "CUST_ID")
# & zips (latitude & longitude)
customer <- left_join(xplay_address, zips, by = "CITY_ZIP")
# How many addresses have been found?
# table(is.na(customer$lat))
# only found 1/3 of all customers...
# Only select relevant columns
customer <- subset(customer, select =
c(CUST_ID, XPlay_Main, STREET_CD, CITY_ZIP, CITY_NAME, lng, lat))
if (!require("dplyr")) install.packages("dplyr") ; library(dplyr)
if (!require("leaflet")) install.packages("leaflet") ; library(leaflet)
if (!require("lubridate")) install.packages("lubridate") ; library(lubridate)
if (!require("xts")) install.packages("xts") ; library(xts)
if (!require("dygraphs")) install.packages("dygraphs") ; library(dygraphs)
if (!require("shiny")) install.packages("shiny") ; library(shiny)
if (!require("scales")) install.packages("scales") ; library(scales)
if (!require("ggplot2")) install.packages("ggplot2") ; library(ggplot2)
if (!require("RColorBrewer")) install.packages("RColorBrewer") ; library(RColorBrewer)
### Get Call Table
all_calls <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/Calls_october.txt",
header = T, sep = "\t", as.is = T, fill = T)
all_calls$MED_SEG_START_TS <- as.POSIXct(all_calls$MED_SEG_START_TS,
format="%d/%m/%Y %H:%M:%S")
# Get data every 60 seconds
# Necessary to plot FOS vs FOT in one point in time
all_calls$MED_SEG_START_TS <- align.time(all_calls$MED_SEG_START_TS, 60)
# Make counter
all_calls$count <- 1
### Get Xplay table
xplay <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/xplay.txt",
header = T, sep = "\t", as.is = T)
### Get Address Table (only residential customers?)
address <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/address.txt",
header = T, sep = "\t", as.is = T)
### Get location ZIP-codes
# Zipcode file:
# https://raw.githubusercontent.com/jief/zipcode-belgium/master/zipcode-belgium.csv
zips <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/zips.txt",
header = T, sep = ",", as.is = T)
zips$zip <- as.character(zips$zip)
names(zips)[1] <- "CITY_ZIP"
# city_zip + meerdere city?
# zips[zips$CITY_ZIP == 9800,]
# Rommeltabel
# Take one entry per zip-code
# Only 702 Postal-codes left
zips <- zips[!duplicated(zips$CITY_ZIP),]
############################### Composing tables ###############################
### Merge address related-stuff
# Xplay & address
xplay_address <- left_join(xplay, address, by = "CUST_ID")
# & zips (latitude & longitude)
customer <- left_join(xplay_address, zips, by = "CITY_ZIP")
# How many addresses have been found?
# table(is.na(customer$lat))
# only found 1/3 of all customers...
# Only select relevant columns
customer <- subset(customer, select =
c(CUST_ID, XPlay_Main, STREET_CD, CITY_ZIP, CITY_NAME, lng, lat))
system.time(customer_available <- customer[!is.na(customer$CITY_ZIP),])
system.time(customer_available <- subset(customer, subset = !is.na(customer$CITY_ZIP)))
system.time(customer_available <- customer[which(!is.na(customer$CITY_ZIP)),])
customer_available <- customer[which(!is.na(customer$CITY_ZIP)),]
shiny::runApp()
input_table <- all_calls
shiny::runApp()
# Number of customers per STREET_CD
bySTREET_CD <- group_by(customer, STREET_CD)
STREET_CD_count <- summarise(bySTREET_CD, count = n())
### Compute full table
get_timeseries <- function(calls, unit, amount) {
# Split between FOT and FOS
FOT_calls <- calls[calls$ADIV == 'COP',]
FOS_calls <- calls[calls$ADIV == 'CCA',]
# Make Time Objects
time_FOS <- xts(FOT_calls$count, FOT_calls$MED_SEG_START_TS)
time_FOT <- xts(FOS_calls$count, FOS_calls$MED_SEG_START_TS)
# Aggregate
FOS_ts <- period.apply(x = time_FOS, endpoints(x = time_FOS, unit, amount), sum)
FOT_ts <- period.apply(x = time_FOT, endpoints(x = time_FOT, unit, amount), sum)
# Return list
timeseries_list <- list("FOS_ts" = FOS_ts, "FOT_ts" = FOT_ts)
return(timeseries_list)
}
### Group data (& keep top x)
grouper_function <- function(DF, group, keep_number = nrow(DF)) {
by_group <- group_by_(DF, group)
output <- summarise(by_group, count = n())
output <- output[order(-output$count),]
output <- head(output, keep_number)
return(output)
}
### Temporary solution
# input_table <- subset(full_table,
#                       select = c(CUST_ID, ADIV, STREET_CD, CITY_ZIP, CITY_NAME,
#                                  MED_SEG_START_TS, lng, lat, count))
### Waarom worden er zo weinig ad
blank_theme <- theme_minimal() +
theme(
axis.title.x = element_blank(),
# axis.text = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(face = "plain"),
legend.title = "Test"
)
proximus_colors <- c("#5C2D92", "#4C9DDD", "#EE2E5D")
shiny::runApp()
head(input_table)
data_TF_1 <- input_table[which(MED_SEG_START_TS >= start_time &
MED_SEG_START_TS <= end_time),]
data_TF_1 <- input_table[which(input_table$MED_SEG_START_TS >= start_time &
input_table$MED_SEG_START_TS <= end_time),]
shiny::runApp()
shiny::runApp()
shiny::runApp()
data_TF_2 <- left_join(call_data, customer_available, by = "CUST_ID")
first_time
time_factor = 3600
first_time <- max(input_table$MED_SEG_START_TS) - 1 * time_factor
first_time
call_data <- input_table[which(input_table$MED_SEG_START_TS > first_time
# Only take FOT calls
& input_table$ADIV == "COP"),]
head(customer_available)
nrow(customer_available)
data_TF_2 <- left_join(call_data, customer_available, by = "CUST_ID")
data_TF_2 <- left_join(call_data, customer_available, by = "CUST_ID")
system.time(data_TF_2 <- left_join(call_data, customer_available, by = "CUST_ID"))
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
data.frame( dt1[dt2,list(x,y1,y2=dt2$y2)] )
}
if (!require("data.table")) install.packages("data.table") ; library(data.table)
d1 <- call_data
d2 <- customer_available
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
data.frame( dt1[dt2,list(x,y1,y2=dt2$y2)] )
}
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
dt1[,list(dt1,dt2)]
}
head(d2)
str(customer_available)
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
dt1[,list(dt1,dt2)]
}
system.time()
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
dt1[,list(dt1,dt2)]
})
system.time(
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
dt1[,list(dt1,dt2)]
})
system.time(
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
data.frame(dt1[,list(dt1,dt2)])
})
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
dt1[,list(dt1,dt2)]
}
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
system.time(dt1[,list(dt1,dt2)])
system.time(
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
new_test <- dt1[,list(dt1,dt2)])
system.time(
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
new_test <- dt1[,list(dt1,dt2)]
)
Result <- dt1[dt2, nomatch=0]
head(Result)
system.time(
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
Result <- dt1[dt2, nomatch=0]
)
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
Result <- dt1[dt2, nomatch=0]
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
Result <- dt1[dt2, nomatch=0]
}
system.time(
data.table = {
dt1 <- data.table(d1, key = "CUST_ID")
dt2 <- data.table(d2, key = "CUST_ID")
Result <- dt1[dt2, nomatch=0]
}
)
library(rbenchmark)
if (!require("rbenchmark")) install.packages("rbenchmark") ; library(rbenchmark)
?merge
merge = merge(call_data, customer_available, all.x = TRUE)
benchmark(replications = 1, order = "elapsed",
merge = merge(call_data, customer_available, all.x = TRUE),
plyr = left_join(call_data, customer_available, by = "CUST_ID"),
data.table =  {
dt1 <- data.table(call_data, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
Result <- dt1[dt2, nomatch=0]
}
)
nrow(call_data)
head(input_table)
nrow(input_table)
nrow(customer_available)
benchmark(replications = 1, order = "elapsed",
merge = merge(input_table, customer_available, all.x = TRUE),
plyr = left_join(input_table, customer_available, by = "CUST_ID"),
data.table =  {
dt1 <- data.table(input_table, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
Result <- dt1[dt2, nomatch=0]
}
)
dt1 <- data.table(call_data, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- dt1[dt2, nomatch=0]
nrow(data_TF_2)
nrow(dt1)
dt1 <- data.table(call_data, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- dt1[dt2, nomatch=0]
head(data_TF_2)
benchmark(replications = 1, order = "elapsed",
merge = merge(all_calls, customer_available, all.x = TRUE),
plyr = left_join(all_calls, customer_available, by = "CUST_ID"),
data.table =  {
dt1 <- data.table(all_calls, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
Result <- as.data.frame(dt1[dt2, nomatch=0])
}
)
nrow(all_calls)
nrow(customer_available)
dt1 <- data.table(call_data, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- as.data.frame(dt1[dt2, nomatch=0])
head(data_TF_2)
nrow(data_TF_2)
nrow(call_data)
nrow(input_data)
nrow(input_table)
dt1 <- data.table(input_table, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- as.data.frame(dt1[dt2, nomatch=0])
head(data_TF_2)
nrow(data_TF_2)
nrow(v)
nrow(all_calls)
benchmark(replications = 1, order = "elapsed",
merge = merge(all_calls, customer_available, all.x = TRUE),
plyr = left_join(all_calls, customer_available, by = "CUST_ID"),
data.table =  {
dt1 <- data.table(all_calls, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
Result <- as.data.frame(dt1[dt2, nomatch=0])
}
)
?merge.data.table
benchmark(replications = 1, order = "elapsed",
merge = merge(all_calls, customer_available, all.x = TRUE),
plyr = left_join(all_calls, customer_available, by = "CUST_ID"),
data.table =  {
dt1 <- data.table(all_calls, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
Result <- as.data.frame(dt1[dt2,])
}
)
# Fixed with data.table
dt1 <- data.table(call_data, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- as.data.frame(dt1[dt2, ])
nrow(dt1)
nrow(dt2)
nrow(data_TF_2)
nrow(input_table)
dt1 <- data.table(input_table, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- as.data.frame(dt1[dt2, ])
nrow(dt1)
nrow(dt2)
nrow(data_TF_2)
# Fixed with data.table
dt1 <- data.table(input_table, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- as.data.frame(dt2[dt1, ])
nrow(dt1)
nrow(dt2)
nrow(data_TF_2)
head(v)
head(data_TF_2)
head(input_table)
head(customer_available)
benchmark(replications = 1, order = "elapsed",
merge = merge(all_calls, customer_available, all.x = TRUE),
plyr = left_join(all_calls, customer_available, by = "CUST_ID"),
data.table =  {
dt1 <- data.table(input_table, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
Result <- as.data.frame(dt2[dt1,])
}
)
nrow(input_table)
dt1 <- data.table(input_table, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
data_TF_2 <- as.data.frame(dt2[dt1, ])
nrow(dt1)
nrow(dt2)
nrow(data_TF_2)
head(data_TF_2)
nrow(input_table)
nrow(customer_available)
benchmark(replications = 1, order = "elapsed",
merge = merge(input_table, customer_available, all.x = TRUE),
plyr = left_join(input_table, customer_available, by = "CUST_ID"),
data.table =  {
dt1 <- data.table(input_table, key = "CUST_ID")
dt2 <- data.table(customer_available, key = "CUST_ID")
Result <- as.data.frame(dt2[dt1,])
}
)
shiny::runApp()
shiny::runApp()
head(customer_available)
head(customer)
head(xplay)
head(address)
head(address, 100)
?read.table
address <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/Address.txt",
header = T, sep = "\t", allowEscapes = T)
head(address)
# Xplay & address
xplay_address <- left_join(xplay, address, by = "CUST_ID")
# & zips (latitude & longitude)
customer <- left_join(xplay_address, zips, by = "CITY_ZIP")
str(address)
str(xplay)
head(customer)
customer <- subset(customer, select =
c(CUST_ID, XPlay_Main, STREET_CD, CITY_ZIP, CITY_NAME, lng, lat))
# Subset speed benchmark
#     system.time(customer_available <- customer[!is.na(customer$CITY_ZIP),])
#     system.time(customer_available <- subset(customer, subset = !is.na(customer$CITY_ZIP)))
#     system.time(customer_available <- customer[which(!is.na(customer$CITY_ZIP)),])
# Which twice as fast as subset!!!
customer_available <- customer[which(!is.na(customer$CITY_ZIP)),]
head(customer_available)
head(address, 100)
?scan
?as.is
?read.table
head(customer_available)
nrow(customer_available)
nrow(call_data)
call_data <- input_table
nrow(call_data)
head(data_TF_2)
geo_calls <- data_TF_2
head(geo_calls)
geo_calls <- geo_calls[!is.na(geo_calls$lng),]
grp_cols <- c("CITY_ZIP", "lng", "lat")
shiny::runApp()
