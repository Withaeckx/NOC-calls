all_calls <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/Calls_october.txt",
header = T, sep = "\t", as.is = T, fill = T)
all_calls$MED_SEG_START_TS <- as.POSIXct(all_calls$MED_SEG_START_TS,
format="%d/%m/%Y %H:%M:%S")
# Get data every 60 seconds
# Necessary to plot FOS vs FOT in one point in time
all_calls$MED_SEG_START_TS <- align.time(all_calls$MED_SEG_START_TS, 60)
# Make counter
all_calls$count <- 1
if (!require("dplyr")) install.packages("dplyr") ; library(dplyr)
if (!require("leaflet")) install.packages("leaflet") ; library(leaflet)
if (!require("lubridate")) install.packages("lubridate") ; library(lubridate)
if (!require("xts")) install.packages("xts") ; library(xts)
if (!require("dygraphs")) install.packages("dygraphs") ; library(dygraphs)
if (!require("shiny")) install.packages("shiny") ; library(shiny)
if (!require("scales")) install.packages("scales") ; library(scales)
if (!require("ggplot2")) install.packages("ggplot2") ; library(ggplot2)
if (!require("RColorBrewer")) install.packages("RColorBrewer") ; library(RColorBrewer)
?first
all_calls <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/Calls_october.txt",
header = T, sep = "\t", as.is = T, fill = T)
all_calls$MED_SEG_START_TS <- as.POSIXct(all_calls$MED_SEG_START_TS,
format="%d/%m/%Y %H:%M:%S")
# Get data every 60 seconds
# Necessary to plot FOS vs FOT in one point in time
all_calls$MED_SEG_START_TS <- align.time(all_calls$MED_SEG_START_TS, 60)
# Make counter
all_calls$count <- 1
xplay <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/xplay.txt",
header = T, sep = "\t", as.is = T)
### Get Address Table (only residential customers?)
address <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/address.txt",
header = T, sep = "\t", as.is = T)
### Get location ZIP-codes
# Zipcode file:
# https://raw.githubusercontent.com/jief/zipcode-belgium/master/zipcode-belgium.csv
zips <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/zips.txt",
header = T, sep = ",", as.is = T)
zips$zip <- as.character(zips$zip)
names(zips)[1] <- "CITY_ZIP"
############################### Loading Packages ###############################
if (!require("dplyr")) install.packages("dplyr") ; library(dplyr)
if (!require("leaflet")) install.packages("leaflet") ; library(leaflet)
if (!require("lubridate")) install.packages("lubridate") ; library(lubridate)
if (!require("xts")) install.packages("xts") ; library(xts)
if (!require("dygraphs")) install.packages("dygraphs") ; library(dygraphs)
if (!require("shiny")) install.packages("shiny") ; library(shiny)
if (!require("scales")) install.packages("scales") ; library(scales)
if (!require("ggplot2")) install.packages("ggplot2") ; library(ggplot2)
if (!require("RColorBrewer")) install.packages("RColorBrewer") ; library(RColorBrewer)
############################### Loading tables ###############################
### Get Call Table
all_calls <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/Calls_october.txt",
header = T, sep = "\t", as.is = T, fill = T)
all_calls$MED_SEG_START_TS <- as.POSIXct(all_calls$MED_SEG_START_TS,
format="%d/%m/%Y %H:%M:%S")
# Get data every 60 seconds
# Necessary to plot FOS vs FOT in one point in time
all_calls$MED_SEG_START_TS <- align.time(all_calls$MED_SEG_START_TS, 60)
# Make counter
all_calls$count <- 1
### Get Xplay table
xplay <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/xplay.txt",
header = T, sep = "\t", as.is = T)
### Get Address Table (only residential customers?)
address <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/address.txt",
header = T, sep = "\t", as.is = T)
### Get location ZIP-codes
# Zipcode file:
# https://raw.githubusercontent.com/jief/zipcode-belgium/master/zipcode-belgium.csv
zips <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/zips.txt",
header = T, sep = ",", as.is = T)
zips$zip <- as.character(zips$zip)
names(zips)[1] <- "CITY_ZIP"
# city_zip + meerdere city?
# zips[zips$CITY_ZIP == 9800,]
# Rommeltabel
# Take one entry per zip-code
# Only 702 Postal-codes left
zips <- zips[!duplicated(zips$CITY_ZIP),]
############################### Composing tables ###############################
### Merge address related-stuff
# Xplay & address
xplay_address <- left_join(xplay, address, by = "CUST_ID")
# & zips (latitude & longitude)
customer <- left_join(xplay_address, zips, by = "CITY_ZIP")
# How many addresses have been found?
# table(is.na(customer$lat))
# only found 1/3 of all customers...
# Only select relevant columns
customer <- subset(customer, select =
c(CUST_ID, XPlay_Main, STREET_CD, CITY_ZIP, CITY_NAME, lng, lat))
### Computing statistics
# Number of customers per STREET_CD
bySTREET_CD <- group_by(customer, STREET_CD)
STREET_CD_count <- summarise(bySTREET_CD, count = n())
### Compute full table
full_table <- left_join(all_calls, customer, by = "CUST_ID")
############################### Global functions ###############################
### Timeseries making
# Create function to make timeseries
# unit = "hours", "minutes", "days"
get_timeseries <- function(calls, unit, amount) {
# Split between FOT and FOS
FOT_calls <- calls[calls$ADIV == 'COP',]
FOS_calls <- calls[calls$ADIV == 'CCA',]
# Make Time Objects
time_FOS <- xts(FOT_calls$count, FOT_calls$MED_SEG_START_TS)
time_FOT <- xts(FOS_calls$count, FOS_calls$MED_SEG_START_TS)
# Aggregate
FOS_ts <- period.apply(x = time_FOS, endpoints(x = time_FOS, unit, amount), sum)
FOT_ts <- period.apply(x = time_FOT, endpoints(x = time_FOT, unit, amount), sum)
# Return list
timeseries_list <- list("FOS_ts" = FOS_ts, "FOT_ts" = FOT_ts)
return(timeseries_list)
}
### Group data (& keep top x)
grouper_function <- function(DF, group, keep_number = nrow(DF)) {
by_group <- group_by_(DF, group)
output <- summarise(by_group, count = n())
output <- output[order(-output$count),]
output <- head(output, keep_number)
return(output)
}
### Temporary solution
input_table <- subset(full_table,
select = c(ADIV, STREET_CD, CITY_ZIP, CITY_NAME,
MED_SEG_START_TS, lng, lat, count))
############################### Layout Plots ###############################
blank_theme <- theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.text = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(face = "plain"),
legend.position = "right"
)
proximus_colors <- c("#5C2D92", "#4C9DDD", "#EE2E5D")
head(full_table)
STREET_calls <- grouper_function(DF = full_table, group = "STREET_CD")
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
head(merged)
merged <- subset(merged, subset = STREET_CD != NA, select = c(STREET_CD, percentage))
head(merged)
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
merged <- subset(as.data.frame(merged), subset = STREET_CD != NA, select = c(STREET_CD, percentage))
head(merged)
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
head(merged)
merged <- subset(merged, subset = STREET_CD != NA)
head(merged)
?subset
STREET_calls <- grouper_function(DF = full_table, group = "STREET_CD")
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
merged <- subset(merged, subset = !is.na(STREET_CD))
head(merged)
?order
STREET_calls <- grouper_function(DF = full_table, group = "STREET_CD")
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
merged <- subset(merged[order(percentage, decreasing = TRUE)],
subset = !is.na(STREET_CD)), select = c(STREET_CD, percentage))
head(merged[order(percentage, decreasing = TRUE)])
head(merged[order(merged$percentage, decreasing = TRUE)])
merged <- merged[order(merged$percentage],]
merged <- merged[order(merged$percentage),]
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
head(merged)
head(STREET_calls)
head(STREET_calls)
head(all_calls)
head(customer)
STREET_calls <- left_join(all_calls, customer, by = "CUST_ID")
head(STREET_calls)
nrow(STREET_calls)
STREET_calls <- STREET_calls[!is.na(STREET_calls$STREET_CD),]
head(STREET_calls)
nrow(STREET_calls)
STREET_calls <- left_join(all_calls,
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
STREET_calls <- STREET_calls[!is.na(STREET_calls$STREET_CD),]
head(STREET_calls)
STREET_calls <- left_join(subset(all_calls, select = CUST_ID),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
head(STREET_calls)
head(all_calls)
STREET_calls <- left_join(subset(all_calls, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
STREET_calls <- STREET_calls[!is.na(STREET_calls$STREET_CD),]
STREET_calls <- unique(STREET_calls[!is.na(STREET_calls$STREET_CD),])
head(STREET_calls)
nrow(STREET_Calls)
nrow(STREET_calls)
STREET_calls <- left_join(subset(all_calls, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
nrow(STREET_calls[!is.na(STREET_calls$STREET_CD),])
STREET_calls <- unique(STREET_calls[!is.na(STREET_calls$STREET_CD),])
STREET_calls <- grouper_function(DF = STREET_calls, group = "STREET_CD")
head(STREET_calls)
head(STREET_CD_count)
# Merge, take unique callers & only take Street_cd's we were able to find
STREET_calls <- left_join(subset(all_calls, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
STREET_calls <- unique(STREET_calls[!is.na(STREET_calls$STREET_CD),])
# Group per street_cd
STREET_calls <- grouper_function(DF = STREET_calls, group = "STREET_CD")
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
merged <- subset(merged, select = c(STREET_CD, percentage))
merged <- merged[order(merged$percentage),]
head(merged)
# Merge, take unique callers & only take Street_cd's we were able to find
STREET_calls <- left_join(subset(all_calls, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
STREET_calls <- unique(STREET_calls[!is.na(STREET_calls$STREET_CD),])
# Group per street_cd
STREET_calls <- grouper_function(DF = STREET_calls, group = "STREET_CD")
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
merged <- subset(merged, select = c(STREET_CD, percentage))
merged <- merged[order(merged$percentage, decreasing = TRUE),]
head(merged)
# Merge, take unique callers & only take Street_cd's we were able to find
STREET_calls <- left_join(subset(all_calls, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
STREET_calls <- unique(STREET_calls[!is.na(STREET_calls$STREET_CD),])
# Group per street_cd
STREET_calls <- grouper_function(DF = STREET_calls, group = "STREET_CD")
head(STREET_calls)
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
head(merged)
head(merged, n = 100)
merged$percentage <- merged$count.x / merged$count.y
head(merged)
merged[merged$percentage == 1,]
STREET_calls[STREET_calls$STREET_CD == 3209,]
STREET_CD_count[STREET_CD_count$STREET_CD == 3209]
head(STREET_CD_count)
str(STREET_CD_count)
STREET_CD_count[STREET_CD_count$STREET_CD == 3209, ]
STREET_calls <- left_join(subset(all_calls, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
STREET_calls <- unique(STREET_calls[!is.na(STREET_calls$STREET_CD),])
# Group per street_cd
STREET_calls <- grouper_function(DF = STREET_calls, group = "STREET_CD")
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
# Remove 1's in DB because not realistic
merged <- subset(merged, select = c(STREET_CD, percentage),
subset = percentage != 1)
merged <- merged[order(merged$percentage, decreasing = TRUE),]
head(merged)
# Merge, take unique callers & only take Street_cd's we were able to find
STREET_calls <- left_join(subset(all_calls, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
STREET_calls <- unique(STREET_calls[!is.na(STREET_calls$STREET_CD),])
# Group per street_cd
STREET_calls <- grouper_function(DF = STREET_calls, group = "STREET_CD")
merged <- left_join(STREET_calls, STREET_CD_count, by = "STREET_CD")
merged$percentage <- merged$count.x / merged$count.y
# Remove 1's in DB because not realistic
merged <- subset(merged, select = c(STREET_CD, percentage, count.x),
subset = percentage != 1)
merged <- merged[order(merged$percentage, decreasing = TRUE),]
head(merged)
shiny::runApp('~/Proximus Calls/TestShiny')
data_timeframe_all <- subset(all_calls,
subset = MED_SEG_START_TS > start_time &
MED_SEG_START_TS < end_time)
head(all_calls)
head(input_table)
shiny::runApp('~/Proximus Calls/TestShiny')
head(customer)
shiny::runApp('~/Proximus Calls/TestShiny')
STREET_calls <- left_join(subset(input_table, select = c(CUST_ID, count)),
subset(customer, select = c(CUST_ID, STREET_CD)),
by = "CUST_ID")
head(input_table)
input_table <- subset(full_table,
select = c(CUST_ID, ADIV, STREET_CD, CITY_ZIP, CITY_NAME,
MED_SEG_START_TS, lng, lat, count))
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
head(input_table)
min(input_table$MED_SEG_START_TS)
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
dateRangeInput
?dateRangeInput
str(input_table)
shiny::runApp()
shiny::runApp('~/Proximus Calls/TestShiny')
head(zips)
zips
zips[zips$CITY_ZIP == 9800,]
zips <- read.table("c:/Users/Andreas/Documents/Proximus Calls/Input_files/zips.txt",
header = T, sep = ",", as.is = T)
zips$zip <- as.character(zips$zip)
names(zips)[1] <- "CITY_ZIP"
zips
zips[zips$CITY_ZIP == 9800,]
head(zips)
nrow(zips)
zips <- zips[!duplicated(zips$CITY_ZIP),]
head(zips)
head(customer)
full_table <- left_join(all_calls, customer, by = "CUST_ID")
head(full_table)
head(full_table, n = 100)
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
head(all-calls)
head(all_calls)
head(data_timeframe)
data_timeframe <- all_calls
data_timeframe
data_timeframe <- left_join(data_timeframe, customer, by = "CUST_ID")
head(data_timeframe)
nrow(data_timeframe)
nrow(all_cals)
nrow(all_calls)
head(customer)
head(data_timeframe)
shiny::runApp('~/Proximus Calls/TestShiny')
head(data_timeframe)
geo_calls <- data_timeframe
geo_calls <- geo_calls[!is.na(geo_calls$lng),]
#Group by zip-code
byCity <- group_by(geo_calls, CITY_ZIP)
geo_calls <- summarise(byCity, count = n())
geo_calls <- geo_calls[order(-geo_calls$count),]
# Quick fix
geo_calls <- left_join(geo_calls, zips, by = "CITY_ZIP")
geo_calls <- geo_calls[!is.na(geo_calls$lng),]
geo_calls
shiny::runApp('~/Proximus Calls/TestShiny')
?grouper_function
head(geo_calls)
geo_calls <- all_calls
head(geo_calls)
data_timeframe <- all_calls
data_timeframe <- left_join(data_timeframe, customer, by = "CUST_ID")
head(data_timeframe)
df <-  data.frame(
asihckhdoydk = sample(LETTERS[1:3], 100, replace=TRUE),
a30mvxigxkgh = sample(LETTERS[1:3], 100, replace=TRUE),
value = rnorm(100)
)
head(df)
grp_cols <- names(df)[-3]
dots <- lapply(grp_cols, as.symbol)
dots
df %>%
group_by_(.dots=dots) %>%
summarise(n = n())
geo_calls <- all_calls
head(geo_calls)
geo_calls <- data_timeframe
head(geo_calls)
grp_cols
class(grp_cols)
length(grp_cols)
# Group by zip-code, lat and lon
grp_cols <- c("CITY_ZIP", "lng", "lat")
# Convert character vector to list of symbols
dots <- lapply(grp_cols, as.symbol)
dots
head(geo_calls)
geo_calls %>%
group_by_(.dots=dots) %>%
summarise(n = n())
geo_calls <- data_timeframe
geo_calls <- unique(geo_calls[!is.na(geo_calls$lng),])
# Group by zip-code, lat and lon
grp_cols <- c("CITY_ZIP", "lng", "lat")
# Convert character vector to list of symbols
dots <- lapply(grp_cols, as.symbol)
# Perform frequency counts
geo_calls %>%
group_by_(.dots=dots) %>%
summarise(count = n())
geo_calls <- geo_calls[order(-geo_calls$count),]
return(geo_calls)
head(geo_calls)
geo_calls <- unique(geo_calls[!is.na(geo_calls$lng),])
# Group by zip-code, lat and lon
grp_cols <- c("CITY_ZIP", "lng", "lat")
# Convert character vector to list of symbols
dots <- lapply(grp_cols, as.symbol)
# Perform frequency counts
geo_calls <- geo_calls %>%
group_by_(.dots=dots) %>%
summarise(count = n())
geo_calls <- geo_calls[order(-geo_calls$count),]
head(geo_calls)
shiny::runApp('~/Proximus Calls/TestShiny')
head(geo_calls)
shiny::runApp('~/Proximus Calls/TestShiny')
head(full_table)
?group_by
test <- full_table[is.na(full_table$lng),]
groupby <- group_by(test, "CITY_ZIP")
head(groupby)
test <- full_table[is.na(full_table$lng),]
by_group <- group_by(test, "CITY_ZIP")
output <- summarise(by_group, count = n())
output <- output[order(-output$count),]
head(output)
test <- full_table[is.na(full_table$lng),]
by_group <- group_by(test, "CITY_ZIP")
output <- summarise(by_group, count = n())
head(output)
test <- full_table[is.na(full_table$lng),]
by_group <- group_by(test, "CITY_ZIP")
head(by_group)
head(as.data.frame(by_group))
head(full_table)
test <- full_table[is.na(full_table$lng),]
head(test)
table(is.na(test$CUST_ID))
table(test$CUST_ID == -1)
test <- full_table[is.na(full_table$lng), "CITY_ZIP"]
head(tets)
head(test)
table(is.na(test))
test <- test[!is.na(test)]
head(test)
table(test)
class(test)
test <- as.data.frame(table(test))
head(test)
testII <- test[order(test$Freq, decreasing = T),]
testII
head(zips)
zips[zips$CITY_ZIP == 4000,]
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
?img
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
shiny::runApp('~/Proximus Calls/TestShiny')
